function [rngTime, rng, errCnt, meanRng] = read_rngfndr(runId,imageTime)
%
% Project:      ::     Optical odometer
% Author        ::     Kenneth Laws
%               ::     Here Technologies
% Date Created  ::     12/14/2017
%
% Reads data file generated by the rangefinder (python script)
% returns the raw range measurements and time stamps with a count of error codes
% received.  Also returns
%   meanRng   mean range over time interval between imageTime(i,1) and (i,2)
%
% change log:
% 5/1/18 - adds computation of mean rangefinder reading over image pair
% interval and stores result in .mat file in local folder

% if nargin < 1
%     rngfndrFile = 'AR700.txt';
%     
%     if exist('/Volumes/M2Ext/Test_Drive_0404/rangefinder/')
%         rngfndrPath = '/Volumes/M2Ext/Test_Drive_0404/rangefinder/';
%     elseif exist('/media/earthmine/M2Ext/Test_Drive_0404/rangefinder/')
%         rngfndrPath = '/media/earthmine/M2Ext/Test_Drive_0404/rangefinder/';
%     else
%         error('data folder not found, update path in script or plug in external drive');
%     end
% end

if exist(['data/' runId '_AR700.mat'])
    load(['data/' runId '_AR700.mat']);
else
    disp 'reading and parsing rangefinder data file'
    
    % get the path name
    [imgPath rngFndrPath gpsPath dataSetID] = getImgPath;

    % open the file
    fid = fopen([rngFndrPath 'AR700.txt']);
    
    % read the data
    delimiter = ',';
    startRow = 2;
    formatSpec = '%q%q%[^\n\r]';
    data = textscan(fid, formatSpec, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    fclose(fid);
    
    % convert the cell arrays to arrays of numbers
    % non numeric values are converted to NaN
    rngTime = data{1};
    rng = data{2};
    rngTime = str2double(rngTime);
    rng = str2double(rng);
    
    % sum the errors
    errCnt = sum(isnan(rng));
    
    % find the mean range offset from rangefinder data for each time interval
    % between optical images
    meanRng = zeros(size(imageTime,1),1);
    for tStep = 1: size(imageTime,1)
        idx = find(rngTime > imageTime(tStep,1) & rngTime <= imageTime(tStep,2));
        meanRng(tStep) = mean(rng(idx),'omitnan');
    end

    save(['data/' runId '_AR700.mat'],'rngTime', 'rng', 'meanRng', 'errCnt');
end

return
